def evaluate_model_with_CNN(my_dataset, batch_size, epochs, img_height, img_width):
 # Prepare balanced datasets
    (X_train, y_train), (X_val, y_val), (X_test, y_test) = prepare_datasets_with_balance(
        my_dataset, img_height, img_width, batch_size
    )
   

    # Data augmentation
    data_augmentation = tf.keras.Sequential([
        layers.RandomFlip("horizontal_and_vertical"),
        layers.RandomRotation(0.2),
        layers.RandomZoom(0.2),
        layers.RandomContrast(0.2)
    ])
    

    # Build the model
    model = tf.keras.Sequential([
        layers.Rescaling(1./255, input_shape=(img_height, img_width, 3)),  
        layers.Conv2D(16, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(pool_size=(2, 2), strides=2, padding='same'),
        layers.Conv2D(32, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(pool_size=(2, 2), strides=2, padding='same'),
        layers.Conv2D(64, 3, padding='same', activation='relu'),
        layers.MaxPooling2D(pool_size=(2, 2), strides=2, padding='same'),
        layers.Dropout(0.5),
        layers.Flatten(),
        layers.Dense(128, activation='relu'),
        layers.Dense(1, activation="sigmoid")  # Binary classification
    ])

    # Compile the model
    model.compile(optimizer="Adam",
                  loss=tf.keras.losses.BinaryCrossentropy(),
                  metrics=["accuracy", tf.keras.metrics.AUC()])

    # Train the model
    history = model.fit(
        X_train, y_train,
        validation_data=(X_val, y_val),
        epochs=epochs,
        batch_size=batch_size
    )

    # Evaluate the model on the test dataset
    test_loss, test_accuracy, test_auc = model.evaluate(X_test, y_test)
    print(f"Test Accuracy: {test_accuracy:.4f}")
    print(f"Test AUC: {test_auc:.4f}")

    y_true = y_test  # Use y_test directly
    y_pred = model.predict(X_test)  # Predict using the model
    y_pred_prob = y_pred.flatten()  # Flatten to get predicted probabilities for malignant class

# Compute Precision-Recall AUC using scikit-learn
    pr_auc = average_precision_score(y_true, y_pred_prob)
    print(f"Precision-Recall AUC: {pr_auc:.4f}")

  
    

    # ROC curve
    fpr, tpr, _ = roc_curve(y_true, y_pred_prob)
    roc_auc = auc(fpr, tpr)

    plt.figure(figsize=(12, 6))
    plt.subplot(1, 2, 1)
    plt.plot(fpr, tpr, color='b', label=f'ROC curve (AUC = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve')
    plt.legend(loc='lower right')

    # Precision-Recall curve
    precision, recall, _ = precision_recall_curve(y_true, y_pred_prob)
    plt.subplot(1, 2, 2)
    plt.plot(recall, precision, color='b', label=f'Precision-Recall AUC = {pr_auc:.2f}')
    plt.xlabel('Recall')
    plt.ylabel('Precision')
    plt.title('Precision-Recall Curve')
    plt.legend(loc='lower left')

    plt.show()

    # Save the trained model
    model.save(f'{my_dataset}_breast cancer model.keras')

    # Adjust threshold for malignant detection
    y_pred_classes = (y_pred_prob > 0.4).astype(int)  

    # Generate classification report and confusion matrix
    report = classification_report(y_true, y_pred_classes, target_names=['Benign', 'Malignant'])
    print("Classification Report:\n", report)

    cm = confusion_matrix(y_true, y_pred_classes)
    acc = history.history['accuracy']
    val_acc = history.history['val_accuracy']
    loss = history.history['loss']
    val_loss = history.history['val_loss']

    epochs_range = range(epochs)

    plt.figure(figsize=(12, 6))

# Accuracy plot
    plt.subplot(1, 2, 1)
    plt.plot(epochs_range, acc, label='Training Accuracy')
    plt.plot(epochs_range, val_acc, label='Validation Accuracy')
    plt.legend()
    plt.title('Training and Validation Accuracy')

    # Loss plot
    plt.subplot(1, 2, 2)
    plt.plot(epochs_range, loss, label='Training Loss')
    plt.plot(epochs_range, val_loss, label='Validation Loss')
    plt.legend()
    plt.title('Training and Validation Loss')

    # Plot the confusion matrix using seaborn heatmap
    plt.figure(figsize=(6, 6))
    sns.heatmap(cm, annot=True, fmt='g', cmap='Blues', xticklabels=['Benign', 'Malignant'], yticklabels=['Benign', 'Malignant'])
    plt.title("Confusion Matrix")
    plt.xlabel('Predicted')
    plt.ylabel('True')
    plt.show()

    return model
